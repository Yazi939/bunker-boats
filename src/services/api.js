import axios from 'axios';

const API_URL = 'http://89.169.170.164:5000/api';

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å axios
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json'
  },
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
  timeout: 10000
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('Adding token to request:', token.substring(0, 15) + '...');
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
api.interceptors.response.use(
  (response) => response,
  (error) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (error.code === 'ECONNABORTED' || !error.response) {
      console.error('API Connection Error:', error.message);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º "–º—è–≥–∫—É—é" –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
      return Promise.resolve({
        data: { error: true, message: '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' },
        status: 503
      });
    }
    
    // –õ–æ–≥ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (error.response && error.response.status === 401) {
      console.error('Authentication Error:', error.response.data);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      // localStorage.removeItem('token');
    }
    
    return Promise.reject(error);
  }
);

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
export const authService = {
  register: (userData) => api.post('/users/register', userData)
    .catch(error => {
      if (!error.response) return { data: { success: false, message: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' } };
      return Promise.reject(error);
    }),
  login: (username, password) => {
    console.log('Login attempt:', { username, passwordProvided: !!password });
    return api.post('/users/login', { username, password })
      .then(response => {
        if (response.data && response.data.token) {
          console.log('Login successful, token received');
        }
        return response;
      })
      .catch(error => {
        console.log('Login error:', error.response?.data);
        if (!error.response) return { data: { success: false, message: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' } };
        return Promise.reject(error);
      });
  },
  getMe: () => api.get('/users/me')
    .then(response => {
      console.log('GetMe successful:', response.data.success);
      return response;
    })
    .catch(error => {
      console.error('GetMe error:', error.response?.data);
      if (!error.response) return { data: { user: null } };
      return Promise.reject(error);
    })
};

// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
export const vehicleService = {
  getVehicles: () => api.get('/vehicles')
    .catch(error => {
      if (!error.response) return { data: [] };
      return Promise.reject(error);
    }),
  getVehicle: (id) => api.get(`/vehicles/${id}`),
  createVehicle: (vehicleData) => api.post('/vehicles', vehicleData),
  updateVehicle: (id, vehicleData) => api.put(`/vehicles/${id}`, vehicleData),
  deleteVehicle: (id) => api.delete(`/vehicles/${id}`)
};

// –°–º–µ–Ω—ã
export const shiftService = {
  getShifts: (params) => api.get('/shifts', { params })
    .catch(error => {
      if (!error.response) return { data: [] };
      return Promise.reject(error);
    }),
  getShift: (id) => api.get(`/shifts/${id}`),
  createShift: (shiftData) => api.post('/shifts', shiftData),
  updateShift: (id, shiftData) => api.put(`/shifts/${id}`, shiftData),
  deleteShift: (id) => api.delete(`/shifts/${id}`)
};

// –¢–æ–ø–ª–∏–≤–æ
export const fuelService = {
  getTransactions: (params) => api.get('/fuel', { params })
    .then(response => {
      console.log('üîç API: Fuel transactions API response type:', typeof response.data);
      console.log('üîç API: Fuel transactions structure:', Object.keys(response.data));
      console.log('üîç API: Is data an array?', Array.isArray(response.data));
      
      let count = 0;
      let data = [];
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
      if (Array.isArray(response.data)) {
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –º–∞—Å—Å–∏–≤
        data = response.data;
        count = data.length;
      } else if (response.data && response.data.data) {
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º data
        data = response.data.data;
        count = response.data.count || data.length;
      } else if (response.data) {
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
        if (typeof response.data === 'object' && !Array.isArray(response.data)) {
          // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –Ω–æ –Ω–µ –º–∞—Å—Å–∏–≤, –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ success –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π API
          if ('success' in response.data && 'data' in response.data) {
            data = Array.isArray(response.data.data) ? response.data.data : [response.data.data];
            count = response.data.count || data.length;
          } else {
            // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –≤ –≤–∏–¥–µ —Å–≤–æ–π—Å—Ç–≤
            data = Object.values(response.data);
            count = data.length;
          }
        } else {
          data = response.data;
          count = 0;
        }
      }
      
      console.log('Fuel transactions received:', count);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤
      if (!Array.isArray(data)) {
        console.warn('üî∂ API: Data is not an array after processing, converting...');
        data = data ? [data] : [];
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º –∫–ª–∏–µ–Ω—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      return {
        data: data,
        count: count
      };
    })
    .catch(error => {
      console.error('üî• API ERROR: Fuel transactions error:', error);
      console.error('üî• API ERROR Details:', error.response?.data || error.message);
      
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (error.response && error.response.status === 400) {
        console.log('üîç API: Trying alternative URL /api/fuel/debug');
        return api.get('/fuel/debug').then(response => {
          console.log('üîç API: Alternative request successful');
          let data = [];
          
          if (Array.isArray(response.data)) {
            data = response.data;
          } else if (response.data && response.data.data) {
            data = Array.isArray(response.data.data) ? response.data.data : [response.data.data];
          } else if (response.data) {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –Ω–æ –Ω–µ –º–∞—Å—Å–∏–≤
            if (typeof response.data === 'object' && !Array.isArray(response.data)) {
              data = Object.values(response.data);
            } else {
              data = response.data ? [response.data] : [];
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤
          if (!Array.isArray(data)) {
            console.warn('üî∂ API: Debug data is not an array after processing, converting...');
            data = data ? [data] : [];
          }
          
          console.log('üîç API: Debug endpoint processed data type:', typeof data);
          console.log('üîç API: Debug endpoint is array?', Array.isArray(data));
          
          return {
            data: data,
            count: data.length
          };
        }).catch(altError => {
          console.error('üî• API ERROR: Alternative request failed:', altError);
          return { data: [] };
        });
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (!error.response) return { data: [] };
      return Promise.reject(error);
    }),
  getTransaction: (id) => api.get(`/fuel/${id}`),
  createTransaction: (transactionData) => {
    console.log('üîß API: Creating transaction with data:', JSON.stringify(transactionData, null, 2));
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const processedData = { ...transactionData };
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (processedData.totalCost === undefined && processedData.volume !== undefined && processedData.price !== undefined) {
      processedData.totalCost = Number(processedData.volume) * Number(processedData.price);
      console.log('üîß API: Calculated totalCost:', processedData.totalCost);
    }
    
    // –í–ê–ñ–ù–û: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ amount –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–≤–µ–Ω volume
    if (processedData.volume !== undefined && (processedData.amount === undefined || processedData.amount === null)) {
      processedData.amount = processedData.volume;
      console.log('üîß API: Setting amount = volume:', processedData.amount);
    }
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ timestamp –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if (processedData.timestamp && typeof processedData.timestamp === 'object') {
      processedData.timestamp = processedData.timestamp.getTime();
      console.log('üîß API: Converted timestamp to number:', processedData.timestamp);
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º undefined –≤ null –¥–ª—è JSON
    Object.keys(processedData).forEach(key => {
      if (processedData[key] === undefined) {
        processedData[key] = null;
      }
    });
    
    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    if (processedData.amount === null || processedData.amount === undefined) {
      console.log('üîß API: Critical field amount is missing, setting to 0');
      processedData.amount = 0;
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ userRole, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ–∂–∏–¥–∞–µ—Ç —ç—Ç–æ –ø–æ–ª–µ
    if (processedData.userRole) {
      delete processedData.userRole;
    }
    
    console.log('üîß API: Processed data for POST request:', JSON.stringify(processedData, null, 2));
    
    // –î–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è
    return api.post('/fuel/direct', processedData)
      .then(response => {
        console.log('üîß API: Transaction created successfully via direct API:', response.data);
        return response;
      })
      .catch(directError => {
        console.error('üî• API ERROR: Direct create failed:', directError);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        return api.post('/fuel', processedData)
          .then(response => {
            console.log('üîß API: Transaction created successfully via standard API:', response.data);
            return response;
          })
          .catch(error => {
            console.error('üî• API ERROR: Standard create failed:', error);
            console.error('üî• API ERROR details:', error.response?.data);
            
            // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if (error.response && error.response.status === 400) {
              console.log('üîç API: Trying debug endpoint');
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL /fuel/debug
              return api.post('/fuel/debug', processedData)
                .then(response => {
                  console.log('üîç API: Debug endpoint request successful');
                  return response;
                })
                .catch(altError => {
                  console.error('üî• API ERROR: Debug endpoint failed:', altError);
                  
                  // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Å–æ–∑–¥–∞—Ç—å —Å–∞–º—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                  console.log('üî• API: Last resort - creating minimal transaction');
                  const minimalData = {
                    type: 'purchase',
                    volume: processedData.volume || 0,
                    amount: processedData.volume || 0,  // –Ø–≤–Ω–æ –∑–∞–¥–∞–µ–º amount
                    price: processedData.price || 0,
                    totalCost: processedData.totalCost || 0,
                    fuelType: processedData.fuelType || 'diesel',
                    date: new Date().toISOString(),
                    timestamp: Date.now()
                  };
                  
                  return api.post('/fuel/direct', minimalData)
                    .then(response => {
                      console.log('üî• API: Minimal transaction created successfully');
                      return response;
                    })
                    .catch(finalError => {
                      console.error('üî• API: All attempts failed:', finalError);
                      return Promise.reject(finalError);
                    });
                });
            }
            
            return Promise.reject(error);
          });
      });
  },
  updateTransaction: (id, transactionData) => api.put(`/fuel/${id}`, transactionData),
  deleteTransaction: (id) => api.delete(`/fuel/${id}`)
};

export default api; 