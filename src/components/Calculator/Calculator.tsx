import React, { useState } from 'react';
import { Card, Input, Button, Checkbox, Tabs, Space, Alert } from 'antd';
import type { TabsProps } from 'antd';

const Calculator: React.FC = () => {
  // –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [distance, setDistance] = useState<string>('');
  const [fuelPrice, setFuelPrice] = useState<string>('');
  const [roundTrip, setRoundTrip] = useState<boolean>(false);
  const [result, setResult] = useState<{
    totalDistance: number;
    fuelAmount: number;
    totalCost: number;
    travelTime?: number;
  } | null>(null);
  const [error, setError] = useState<string | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞–∑–µ–º–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  const [fuelConsumption, setFuelConsumption] = useState<string>('');

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  const [speedWater, setSpeedWater] = useState<string>('');
  const [hourlyConsumption, setHourlyConsumption] = useState<string>('');

  const handleCalculateLand = () => {
    setError(null);
    
    const distanceNum = parseFloat(distance);
    const consumptionNum = parseFloat(fuelConsumption);
    const priceNum = parseFloat(fuelPrice);
    
    if (isNaN(distanceNum) || isNaN(consumptionNum) || isNaN(priceNum)) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏');
      return;
    }
    
    if (distanceNum <= 0 || consumptionNum <= 0 || priceNum <= 0) {
      setError('–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
      return;
    }
    
    const totalDistance = roundTrip ? distanceNum * 2 : distanceNum;
    const fuelAmount = (totalDistance * consumptionNum) / 100;
    const totalCost = fuelAmount * priceNum;
    
    setResult({
      totalDistance,
      fuelAmount,
      totalCost
    });
  };

  const handleCalculateWater = () => {
    setError(null);
    
    const distanceNum = parseFloat(distance);
    const speedNum = parseFloat(speedWater);
    const hourlyConsumptionNum = parseFloat(hourlyConsumption);
    const priceNum = parseFloat(fuelPrice);
    
    if (isNaN(distanceNum) || isNaN(speedNum) || isNaN(hourlyConsumptionNum) || isNaN(priceNum)) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏');
      return;
    }
    
    if (distanceNum <= 0 || speedNum <= 0 || hourlyConsumptionNum <= 0 || priceNum <= 0) {
      setError('–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
      return;
    }
    
    const totalDistance = roundTrip ? distanceNum * 2 : distanceNum;
    const travelTimeHours = totalDistance / speedNum;
    const fuelAmount = hourlyConsumptionNum * travelTimeHours;
    const totalCost = fuelAmount * priceNum;
    
    setResult({
      totalDistance,
      fuelAmount,
      totalCost,
      travelTime: travelTimeHours
    });
  };

  const formatTime = (hours: number): string => {
    if (hours < 1) {
      return Math.round(hours * 60) + ' –º–∏–Ω';
    }
    const wholeHours = Math.floor(hours);
    const minutes = Math.round((hours - wholeHours) * 60);
    return wholeHours + ' —á ' + (minutes > 0 ? minutes + ' –º–∏–Ω' : '');
  };

  const items: TabsProps['items'] = [
    {
      key: 'land',
      label: (
        <span>
          üöó –ù–∞–∑–µ–º–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        </span>
      ),
      children: (
        <Card>
          <Space direction="vertical" style={{ width: '100%' }}>
            <div>
              <div>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ</div>
              <Input
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ"
                value={distance}
                onChange={(e) => setDistance(e.target.value)}
                suffix="–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö"
                type="number"
                min="0"
              />
            </div>
            
            <div>
              <div>–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞</div>
              <Input
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞"
                value={fuelConsumption}
                onChange={(e) => setFuelConsumption(e.target.value)}
                suffix="–ª/100–∫–º"
                type="number"
                min="0"
                step="0.1"
              />
            </div>
            
            <div>
              <div>–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞</div>
              <Input
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–ø–ª–∏–≤–∞"
                value={fuelPrice}
                onChange={(e) => setFuelPrice(e.target.value)}
                suffix="‚ÇΩ/–ª"
                type="number"
                min="0"
                step="0.1"
              />
            </div>
            
            <Checkbox checked={roundTrip} onChange={(e) => setRoundTrip(e.target.checked)}>
              –£—á–∏—Ç—ã–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –ø—É—Ç—å
            </Checkbox>
            
            <Button type="primary" block onClick={handleCalculateLand}>
              –†–∞—Å—Å—á–∏—Ç–∞—Ç—å
            </Button>
            
            {error && (
              <Alert message={error} type="error" showIcon />
            )}
            
            {result && (
              <Card title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞" style={{ marginTop: 16 }}>
                <p><strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> {result.totalDistance.toFixed(1)} –∫–º</p>
                <p><strong>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞:</strong> {result.fuelAmount.toFixed(2)} –ª</p>
                <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏:</strong> {result.totalCost.toFixed(2)} ‚ÇΩ</p>
              </Card>
            )}
          </Space>
        </Card>
      ),
    },
    {
      key: 'water',
      label: (
        <span>
          ‚õµ –í–æ–¥–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        </span>
      ),
      children: (
        <Card>
          <Space direction="vertical" style={{ width: '100%' }}>
            <div>
              <div>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ</div>
              <Input
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ"
                value={distance}
                onChange={(e) => setDistance(e.target.value)}
                suffix="–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö"
                type="number"
                min="0"
              />
            </div>
            
            <div>
              <div>–°–∫–æ—Ä–æ—Å—Ç—å —Å—É–¥–Ω–∞</div>
              <Input
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å"
                value={speedWater}
                onChange={(e) => setSpeedWater(e.target.value)}
                suffix="–∫–º/—á"
                type="number"
                min="0"
                step="0.1"
              />
            </div>
            
            <div>
              <div>–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤ —á–∞—Å</div>
              <Input
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞"
                value={hourlyConsumption}
                onChange={(e) => setHourlyConsumption(e.target.value)}
                suffix="–ª/—á–∞—Å"
                type="number"
                min="0"
                step="0.1"
              />
            </div>
            
            <div>
              <div>–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞</div>
              <Input
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–ø–ª–∏–≤–∞"
                value={fuelPrice}
                onChange={(e) => setFuelPrice(e.target.value)}
                suffix="‚ÇΩ/–ª"
                type="number"
                min="0"
                step="0.1"
              />
            </div>
            
            <Checkbox checked={roundTrip} onChange={(e) => setRoundTrip(e.target.checked)}>
              –£—á–∏—Ç—ã–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –ø—É—Ç—å
            </Checkbox>
            
            <Button type="primary" block onClick={handleCalculateWater}>
              –†–∞—Å—Å—á–∏—Ç–∞—Ç—å
            </Button>
            
            {error && (
              <Alert message={error} type="error" showIcon />
            )}
            
            {result && (
              <Card title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞" style={{ marginTop: 16 }}>
                <p><strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> {result.totalDistance.toFixed(1)} –∫–º</p>
                {result.travelTime && (
                  <p><strong>–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</strong> {formatTime(result.travelTime)}</p>
                )}
                <p><strong>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞:</strong> {result.fuelAmount.toFixed(2)} –ª</p>
                <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏:</strong> {result.totalCost.toFixed(2)} ‚ÇΩ</p>
              </Card>
            )}
          </Space>
        </Card>
      )
    },
  ];

  return (
    <div style={{ padding: '24px' }}>
      <h1>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞</h1>
      <Tabs defaultActiveKey="land" items={items} />
    </div>
  );
};

export default Calculator;