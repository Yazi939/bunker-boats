const jwt = require('jsonwebtoken');
const { User } = require('../models/initModels');

// –ó–∞—â–∏—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
exports.protect = async (req, res, next) => {
  let token;

  try {
    console.log('üîí AUTH: Checking authorization for path:', req.path);
    console.log('üîí AUTH: Headers:', JSON.stringify(req.headers));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
    if (
      req.headers.authorization &&
      req.headers.authorization.startsWith('Bearer')
    ) {
      token = req.headers.authorization.split(' ')[1];
      console.log('üîí AUTH: Token received:', token ? token.substring(0, 15) + '...' : 'No token');
    } else if (req.cookies && req.cookies.token) {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–æ–∫–µ–Ω–∞ - –∏–∑ cookies
      token = req.cookies.token;
      console.log('üîí AUTH: Token from cookies:', token ? token.substring(0, 15) + '...' : 'No token');
    } else if (req.query && req.query.token) {
      // –ï—â–µ –æ–¥–∏–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ - –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      token = req.query.token;
      console.log('üîí AUTH: Token from query:', token ? token.substring(0, 15) + '...' : 'No token');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!token) {
      console.log('üîí AUTH: No authorization token provided');
      
      // –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ API
      if (process.env.DISABLE_AUTH === 'true' || req.query.skipAuth === 'true') {
        console.log('üîí AUTH: Auth check skipped for debugging');
        req.user = { id: 1, username: 'debuguser', role: 'admin' };
        return next();
      }
      
      return res.status(401).json({
        success: false,
        error: '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–µ—Å—É—Ä—Å—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–≥–æ –∂–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const secret = process.env.JWT_SECRET || 'JFGDJFGDJGFJTOKENSECRETKEY564373';
    console.log('üîí AUTH: JWT Secret (first 10 chars):', secret.substring(0, 10) + '...');
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    let decoded;
    try {
      decoded = jwt.verify(token, secret);
      console.log('üîí AUTH: Decoded token:', decoded);
    } catch (jwtError) {
      console.error('üîí AUTH: JWT verification error:', jwtError.message);
      
      // –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ API
      if (process.env.DISABLE_AUTH === 'true' || req.query.skipAuth === 'true') {
        console.log('üîí AUTH: Auth check skipped after JWT error');
        req.user = { id: 1, username: 'debuguser', role: 'admin' };
        return next();
      }
      
      return res.status(401).json({
        success: false,
        error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω',
        details: process.env.NODE_ENV === 'development' ? jwtError.message : undefined
      });
    }

    if (!decoded || !decoded.id) {
      console.error('üîí AUTH: Invalid token payload - missing user ID');
      return res.status(401).json({
        success: false,
        error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–∑ —Ç–æ–∫–µ–Ω–∞
    try {
      const user = await User.findByPk(decoded.id);
      console.log('üîí AUTH: User found:', user ? 'Yes' : 'No');
      
      if (!user) {
        console.log('üîí AUTH: User ID from token not found in database:', decoded.id);
        return res.status(401).json({
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–ø—Ä–æ—Å
      req.user = {
        id: user.id,
        username: user.username,
        role: user.role
      };
      
      console.log('üîí AUTH: Authentication successful for user:', user.username);
      next();
    } catch (dbError) {
      console.error('üîí AUTH: Database error when finding user:', dbError.message);
      return res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        details: process.env.NODE_ENV === 'development' ? dbError.message : undefined
      });
    }
  } catch (err) {
    console.error('üîí AUTH: Auth middleware uncaught error:', {
      name: err.name,
      message: err.message,
      stack: err.stack
    });
    
    return res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      details: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
exports.authorize = (...roles) => {
  return (req, res, next) => {
    if (!req.user || !roles.includes(req.user.role)) {
      console.log('Authorization failed. User role:', req.user ? req.user.role : 'unknown', 'Required roles:', roles);
      return res.status(403).json({
        success: false,
        error: `–†–æ–ª—å ${req.user ? req.user.role : 'unknown'} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–µ—Å—É—Ä—Å—É`
      });
    }
    console.log('Authorization successful for role:', req.user.role);
    next();
  };
}; 