const { FuelTransaction, User, Vehicle } = require('../models/initModels');
const { Op } = require('sequelize');
const { sequelize } = require('../models/initModels');

// @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
// @route   GET /api/fuel
// @access  Private
exports.getTransactions = async (req, res) => {
  try {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
    let whereClause = {};
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (req.query.fuelType) {
      whereClause.fuelType = req.query.fuelType;
    }
    
    if (req.query.type) {
      whereClause.type = req.query.type;
    }
    
    if (req.query.startDate && req.query.endDate) {
      whereClause.date = {
        [Op.between]: [req.query.startDate, req.query.endDate]
      };
    }
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const page = parseInt(req.query.page, 10) || 1;
    const limit = parseInt(req.query.limit, 10) || 25;
    const offset = (page - 1) * limit;
    
    // –û–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    let order = [['date', 'DESC']]; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ –¥–∞—Ç–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    if (req.query.sort) {
      const sortParams = req.query.sort.split(',');
      order = sortParams.map(param => {
        if (param.startsWith('-')) {
          return [param.substring(1), 'DESC'];
        }
        return [param, 'ASC'];
      });
    }
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const { count, rows } = await FuelTransaction.findAndCountAll({
      where: whereClause,
      limit,
      offset,
      order,
      include: [
        { model: User, as: 'user', attributes: ['id', 'username', 'role'] },
        { model: Vehicle, as: 'vehicle', attributes: ['id', 'name', 'registrationNumber'] }
      ]
    });
    
    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    const transactions = rows.map(transaction => {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç Sequelize –≤ —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç
      const plainTransaction = transaction.get({ plain: true });
      
      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞
      if (!plainTransaction.key) {
        plainTransaction.key = `tx-${plainTransaction.id}-${Date.now()}`;
      }
      
      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ volume –∏ amount —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
      if (plainTransaction.volume === undefined && plainTransaction.amount !== undefined) {
        plainTransaction.volume = plainTransaction.amount;
      } else if (plainTransaction.amount === undefined && plainTransaction.volume !== undefined) {
        plainTransaction.amount = plainTransaction.volume;
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!plainTransaction.timestamp && plainTransaction.date) {
        plainTransaction.timestamp = new Date(plainTransaction.date).getTime();
      }
      
      return plainTransaction;
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞ success/data
    return res.status(200).json(transactions);
  } catch (error) {
    console.error('Error in getTransactions:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    res.status(500).json([]);
  }
};

// @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
// @route   GET /api/fuel/:id
// @access  Private
exports.getTransaction = async (req, res) => {
  try {
    const transaction = await FuelTransaction.findByPk(req.params.id, {
      include: [
        { model: User, as: 'user', attributes: ['id', 'username', 'role'] },
        { model: Vehicle, as: 'vehicle', attributes: ['id', 'name', 'registrationNumber'] }
      ]
    });
    
    if (!transaction) {
      return res.status(404).json({
        success: false,
        error: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    res.status(200).json({
      success: true,
      data: transaction
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
};

// @desc    –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
// @route   POST /api/fuel
// @access  Private
exports.createTransaction = async (req, res) => {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (req.user) {
      req.body.userId = req.user.id;
    }
    
    const transaction = await FuelTransaction.create(req.body);
    
    res.status(201).json({
      success: true,
      data: transaction
    });
  } catch (error) {
    console.error('Error in createTransaction:', error);
    res.status(400).json({
      success: false,
      error: error.message
    });
  }
};

// @desc    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
// @route   PUT /api/fuel/:id
// @access  Private
exports.updateTransaction = async (req, res) => {
  try {
    let transaction = await FuelTransaction.findByPk(req.params.id);
    
    if (!transaction) {
      return res.status(404).json({
        success: false,
        error: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (transaction.frozen && req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –∞–¥–º–∏–Ω–∞
    if (transaction.userId && transaction.userId !== req.user.id && req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
      });
    }
    
    // –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é
    req.body.edited = true;
    
    await transaction.update(req.body);
    
    const updatedTransaction = await FuelTransaction.findByPk(req.params.id, {
      include: [
        { model: User, as: 'user', attributes: ['id', 'username', 'role'] },
        { model: Vehicle, as: 'vehicle', attributes: ['id', 'name', 'registrationNumber'] }
      ]
    });
    
    res.status(200).json({
      success: true,
      data: updatedTransaction
    });
  } catch (error) {
    console.error('Error in updateTransaction:', error);
    res.status(400).json({
      success: false,
      error: error.message
    });
  }
};

// @desc    –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
// @route   DELETE /api/fuel/:id
// @access  Private
exports.deleteTransaction = async (req, res) => {
  try {
    const transaction = await FuelTransaction.findByPk(req.params.id);
    
    if (!transaction) {
      return res.status(404).json({
        success: false,
        error: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (transaction.frozen && req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –∞–¥–º–∏–Ω–∞
    if (transaction.userId && transaction.userId !== req.user.id && req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
      });
    }
    
    await transaction.destroy();
    
    res.status(200).json({
      success: true,
      data: {}
    });
  } catch (error) {
    console.error('Error in deleteTransaction:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
};

// @desc    –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL
// @route   POST /api/fuel/direct
// @access  Public
exports.createTransactionDirect = async (req, res) => {
  try {
    console.log('üíâ POST /api/fuel/direct - START REQUEST');
    console.log('üíâ Request body:', JSON.stringify(req.body, null, 2));
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const { type, volume, price, totalCost, fuelType, supplier, timestamp, date, key } = req.body;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const safeType = type || 'purchase';
    const safeVolume = volume || 0;
    const safePrice = price || 0;
    const safeTotalCost = totalCost || (safeVolume * safePrice);
    const safeFuelType = fuelType || 'gasoline_95';
    const safeSupplier = supplier || null;
    const safeDate = date ? new Date(date) : (timestamp ? new Date(timestamp) : new Date());
    const safeKey = key || `direct-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–π SQL-–∑–∞–ø—Ä–æ—Å, –æ–±—Ö–æ–¥—è ORM
    const query = `
      INSERT INTO "FuelTransactions" 
      ("type", "volume", "amount", "price", "totalCost", "fuelType", "supplier", "date", "key", "createdAt", "updatedAt")
      VALUES 
      (?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
      RETURNING *
    `;
    
    const values = [
      safeType,
      safeVolume,
      safeVolume, // amount = volume
      safePrice, 
      safeTotalCost,
      safeFuelType,
      safeSupplier,
      safeDate,
      safeKey
    ];
    
    console.log('üíâ Executing SQL with values:', values);
    
    const result = await sequelize.query(query, {
      replacements: values,
      type: sequelize.QueryTypes.INSERT,
      raw: true
    });
    
    console.log('üíâ Transaction created with direct SQL');
    
    res.status(201).json({
      success: true,
      data: result[0]
    });
  } catch (error) {
    console.error('üíâ Error in direct transaction creation:', error);
    
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL',
      details: error.message
    });
  }
}; 