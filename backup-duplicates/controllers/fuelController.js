const { FuelTransaction, User, Vehicle, sequelize } = require('../models/initModels');
const { Op } = require('sequelize');

// @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
// @route   GET /api/fuel
// @access  Private
exports.getTransactions = async (req, res) => {
  try {
    console.log('GET /api/fuel - Starting to process request');
    console.log('Request query:', JSON.stringify(req.query));
    console.log('Request headers:', JSON.stringify(req.headers));
    console.log('User info:', req.user);
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('üîß DEBUG: Path:', req.path);
    console.log('üîß DEBUG: RequestID:', req.id || 'None');
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
    let whereClause = {};
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (req.query.fuelType) {
      whereClause.fuelType = req.query.fuelType;
    }
    
    if (req.query.type) {
      whereClause.type = req.query.type;
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    if (req.query.startDate && req.query.endDate) {
      try {
        const startDate = new Date(req.query.startDate);
        const endDate = new Date(req.query.endDate);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç
        if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {
          whereClause.date = {
            [Op.between]: [startDate, endDate]
          };
        } else {
          console.warn('Invalid date format in query:', req.query.startDate, req.query.endDate);
        }
      } catch (dateError) {
        console.error('Error parsing dates:', dateError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
      }
    }
    
    console.log('Where clause:', JSON.stringify(whereClause, null, 2));
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const page = parseInt(req.query.page, 10) || 1;
    const limit = parseInt(req.query.limit, 10) || 25;
    const offset = (page - 1) * limit;
    
    // –û–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    let order = [['date', 'DESC']]; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ –¥–∞—Ç–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    if (req.query.sort) {
      try {
        const sortParams = req.query.sort.split(',');
        const validOrderOptions = [];
        
        sortParams.forEach(param => {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
          let field = param.startsWith('-') ? param.substring(1) : param;
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏
          if (FuelTransaction.rawAttributes[field]) {
            if (param.startsWith('-')) {
              validOrderOptions.push([field, 'DESC']);
            } else {
              validOrderOptions.push([field, 'ASC']);
            }
          }
        });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º validOrderOptions —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è
        if (validOrderOptions.length > 0) {
          order = validOrderOptions;
        }
      } catch (sortError) {
        console.error('Error processing sort parameters:', sortError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
    }
    
    console.log('Executing query with pagination:', { page, limit, offset });
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –æ–ø—Ü–∏–π
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      const { count, rows } = await FuelTransaction.findAndCountAll({
        where: whereClause,
        limit,
        offset,
        order,
        // –û—Ç–∫–ª—é—á–∞–µ–º raw –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        raw: false
      });
      
      console.log(`Query returned ${rows.length} of ${count} total records`);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ - —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–º–µ—é—Ç –æ–±—ä–µ–º
      const processedRows = rows.map(transaction => {
        const plainTransaction = transaction.get({ plain: true });
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º key, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!plainTransaction.key) {
          plainTransaction.key = `transaction-${plainTransaction.id}`;
        }
        
        // –ï—Å–ª–∏ –æ–±—ä–µ–º –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–æ –µ—Å—Ç—å amount, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –æ–±—ä–µ–º
        if (plainTransaction.volume === undefined && plainTransaction.amount !== undefined) {
          plainTransaction.volume = plainTransaction.amount;
        } else if (plainTransaction.volume === undefined) {
          plainTransaction.volume = 0;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç timestamp, –Ω–æ –µ—Å—Ç—å date, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
        if (plainTransaction.timestamp === undefined && plainTransaction.date) {
          plainTransaction.timestamp = new Date(plainTransaction.date).getTime();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        if (plainTransaction.fuelType === undefined) {
          plainTransaction.fuelType = 'gasoline_95';
        }
        
        if (plainTransaction.price === undefined) {
          plainTransaction.price = 0;
        }
        
        if (plainTransaction.totalCost === undefined) {
          plainTransaction.totalCost = plainTransaction.volume * plainTransaction.price;
        }
        
        return plainTransaction;
      });
      
      // –û–±—ä–µ–∫—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      const pagination = {
        total: count,
        page,
        limit,
        pages: Math.ceil(count / limit)
      };
      
      if (page < pagination.pages) {
        pagination.next = {
          page: page + 1,
          limit
        };
      }
      
      if (page > 1) {
        pagination.prev = {
          page: page - 1,
          limit
        };
      }
      
      console.log('GET /api/fuel - Successfully completed');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      const responseData = {
        success: true,
        count: processedRows.length,
        pagination,
        data: processedRows
      };
      
      console.log('Response data structure:', Object.keys(responseData));
      console.log('Sample record:', processedRows.length > 0 ? 
        JSON.stringify(processedRows[0], null, 2).substring(0, 200) + '...' : 'No records');
      
      res.status(200).json(responseData);
    } catch (queryError) {
      console.error('Error in basic query:', queryError);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–æ–ø–ª–∏–≤–∞',
        details: process.env.NODE_ENV === 'development' ? queryError.message : undefined
      });
    }
  } catch (error) {
    console.error('Unhandled error in getTransactions:', error);
    console.error('Stack trace:', error.stack);
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};

// @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
// @route   GET /api/fuel/:id
// @access  Private
exports.getTransaction = async (req, res) => {
  try {
    console.log(`GET /api/fuel/${req.params.id} - Start`);
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ID
    if (!req.params.id) {
      return res.status(400).json({
        success: false,
        error: 'ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω'
      });
    }
    
    // –£–ø—Ä–æ—â–∞–µ–º –∑–∞–ø—Ä–æ—Å, —É–±–∏—Ä–∞—è –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const transaction = await FuelTransaction.findByPk(req.params.id);
    
    if (!transaction) {
      console.log(`Transaction with ID ${req.params.id} not found`);
      return res.status(404).json({
        success: false,
        error: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    console.log(`GET /api/fuel/${req.params.id} - Success`);
    
    res.status(200).json({
      success: true,
      data: transaction
    });
  } catch (error) {
    console.error(`Error in getTransaction (ID: ${req.params.id}):`, error);
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};

// @desc    –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
// @route   POST /api/fuel
// @access  Private
exports.createTransaction = async (req, res) => {
  try {
    console.log('üî• POST /api/fuel - START REQUEST');
    console.log('üî• Request body (full):', JSON.stringify(req.body, null, 2));
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º req.body –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const processedData = { ...req.body };
    
    // –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    // –ï—Å–ª–∏ type –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!processedData.type) {
      processedData.type = 'purchase';
      console.log('üî• Using default type: purchase');
    }
    
    // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º amount
    // –ü–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (processedData.amount === undefined || processedData.amount === null) {
      if (processedData.volume !== undefined && processedData.volume !== null) {
        processedData.amount = processedData.volume;
        console.log('üî• Setting amount = volume:', processedData.amount);
      } else {
        processedData.amount = 0;
        processedData.volume = 0;
        console.log('üî• Using default amount/volume: 0');
      }
    }
    
    // –ï—Å–ª–∏ volume –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–æ amount —É–∫–∞–∑–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º volume = amount
    if ((processedData.volume === undefined || processedData.volume === null) && 
        processedData.amount !== undefined && processedData.amount !== null) {
      processedData.volume = processedData.amount;
      console.log('üî• Setting volume = amount:', processedData.volume);
    }
    
    // –ï—Å–ª–∏ price –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
    if (processedData.price === undefined || processedData.price === null) {
      processedData.price = 0;
      console.log('üî• Using default price: 0');
    }
    
    // –ï—Å–ª–∏ totalCost –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ
    if (processedData.totalCost === undefined || processedData.totalCost === null) {
      processedData.totalCost = Number(processedData.volume) * Number(processedData.price);
      console.log('üî• Calculated totalCost:', processedData.totalCost);
    }
    
    // –ï—Å–ª–∏ fuelType –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (processedData.fuelType === undefined || processedData.fuelType === null) {
      processedData.fuelType = 'gasoline_95';
      console.log('üî• Using default fuelType: gasoline_95');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ timestamp
    if (processedData.timestamp) {
      try {
        processedData.date = new Date(processedData.timestamp);
      } catch (e) {
        processedData.date = new Date(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      }
    } else if (!processedData.date) {
      processedData.date = new Date();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (req.user) {
      processedData.userId = req.user.id;
    }
    
    // –í–ê–ñ–ù–û: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
    console.log('üî• Checking critical field amount:', processedData.amount);
    if (processedData.amount === undefined || processedData.amount === null) {
      console.error('üî• CRITICAL ERROR: amount is still null/undefined after processing');
      // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å amount
      processedData.amount = 0;
    }
    
    console.log('üî• Sanitized data for create:', {
      type: processedData.type,
      fuelType: processedData.fuelType,
      volume: processedData.volume,
      amount: processedData.amount,  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ amount
      price: processedData.price,
      totalCost: processedData.totalCost,
      date: processedData.date
    });
    
    try {
      const transaction = await FuelTransaction.create(processedData);
      console.log(`üî• Transaction created with ID: ${transaction.id}`);
      
      res.status(201).json({
        success: true,
        data: transaction
      });
    } catch (dbError) {
      console.error('üî• Database error in createTransaction:', dbError);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –ø–æ–ª–µ–º amount
      if (dbError.message && dbError.message.includes('amount cannot be null')) {
        console.log('üî• Detected amount null error, creating minimal transaction');
        
        // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º amount
        const minimalData = {
          type: processedData.type || 'purchase',
          volume: processedData.volume || 0,
          amount: processedData.volume || 0,  // –Ø–≤–Ω–æ –∑–∞–¥–∞–µ–º amount = volume
          price: processedData.price || 0,
          totalCost: processedData.totalCost || 0,
          fuelType: processedData.fuelType || 'gasoline_95',
          date: new Date(),
          timestamp: Date.now(),
          userId: req.user ? req.user.id : null,
          key: processedData.key || null
        };
        
        try {
          const minimalTransaction = await FuelTransaction.create(minimalData);
          console.log(`üî• Created transaction with minimal data, ID: ${minimalTransaction.id}`);
          
          res.status(201).json({
            success: true,
            data: minimalTransaction
          });
          return;
        } catch (minimalError) {
          console.error('üî• Failed to create with minimal data:', minimalError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫
        }
      }
      
      res.status(400).json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é',
        details: dbError.message
      });
    }
  } catch (error) {
    console.error('üî• Unhandled error in createTransaction:', error);
    
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
      details: error.message
    });
  }
};

// @desc    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
// @route   PUT /api/fuel/:id
// @access  Private
exports.updateTransaction = async (req, res) => {
  try {
    console.log(`PUT /api/fuel/${req.params.id} - Start`);
    
    let transaction = await FuelTransaction.findByPk(req.params.id);
    
    if (!transaction) {
      console.log(`Transaction with ID ${req.params.id} not found`);
      return res.status(404).json({
        success: false,
        error: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (transaction.frozen && req.user.role !== 'admin') {
      console.log(`Attempt to update frozen transaction ${req.params.id} by non-admin user`);
      return res.status(403).json({
        success: false,
        error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –∞–¥–º–∏–Ω–∞
    if (transaction.userId && transaction.userId !== req.user.id && req.user.role !== 'admin') {
      console.log(`Unauthorized attempt to update transaction ${req.params.id} by user ${req.user.id}`);
      return res.status(403).json({
        success: false,
        error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
      });
    }
    
    // –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é
    req.body.edited = true;
    
    try {
      await transaction.update(req.body);
      console.log(`Transaction ${req.params.id} updated successfully`);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const updatedTransaction = await FuelTransaction.findByPk(req.params.id);
      
      res.status(200).json({
        success: true,
        data: updatedTransaction
      });
    } catch (updateError) {
      console.error(`Error updating transaction ${req.params.id}:`, updateError);
      res.status(400).json({
        success: false,
        error: updateError.message,
        stack: process.env.NODE_ENV === 'development' ? updateError.stack : undefined
      });
    }
  } catch (error) {
    console.error('Error in updateTransaction:', error);
    res.status(400).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};

// @desc    –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
// @route   DELETE /api/fuel/:id
// @access  Private
exports.deleteTransaction = async (req, res) => {
  try {
    console.log(`DELETE /api/fuel/${req.params.id} - Start`);
    
    const transaction = await FuelTransaction.findByPk(req.params.id);
    
    if (!transaction) {
      console.log(`Transaction with ID ${req.params.id} not found`);
      return res.status(404).json({
        success: false,
        error: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (transaction.frozen && req.user.role !== 'admin') {
      console.log(`Attempt to delete frozen transaction ${req.params.id} by non-admin user`);
      return res.status(403).json({
        success: false,
        error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –∞–¥–º–∏–Ω–∞
    if (transaction.userId && transaction.userId !== req.user.id && req.user.role !== 'admin') {
      console.log(`Unauthorized attempt to delete transaction ${req.params.id} by user ${req.user.id}`);
      return res.status(403).json({
        success: false,
        error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
      });
    }
    
    await transaction.destroy();
    console.log(`Transaction ${req.params.id} deleted successfully`);
    
    res.status(200).json({
      success: true,
      data: {}
    });
  } catch (error) {
    console.error(`Error in deleteTransaction (ID: ${req.params.id}):`, error);
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};

// @desc    –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL
// @route   POST /api/fuel/direct
// @access  Public
exports.createTransactionDirect = async (req, res) => {
  try {
    console.log('üíâ POST /api/fuel/direct - START REQUEST');
    console.log('üíâ Request body:', JSON.stringify(req.body, null, 2));
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const { type, volume, price, totalCost, fuelType, supplier, timestamp, date, key } = req.body;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const safeType = type || 'purchase';
    const safeVolume = volume || 0;
    const safePrice = price || 0;
    const safeTotalCost = totalCost || (safeVolume * safePrice);
    const safeFuelType = fuelType || 'gasoline_95';
    const safeSupplier = supplier || null;
    const safeDate = date ? new Date(date) : (timestamp ? new Date(timestamp) : new Date());
    const safeKey = key || `direct-${Date.now()}`;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–π SQL-–∑–∞–ø—Ä–æ—Å, –æ–±—Ö–æ–¥—è ORM
    const query = `
      INSERT INTO "FuelTransactions" 
      ("type", "volume", "amount", "price", "totalCost", "fuelType", "supplier", "date", "key", "createdAt", "updatedAt")
      VALUES 
      ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW(), NOW())
      RETURNING *
    `;
    
    const values = [
      safeType,
      safeVolume,
      safeVolume, // amount = volume
      safePrice, 
      safeTotalCost,
      safeFuelType,
      safeSupplier,
      safeDate,
      safeKey
    ];
    
    console.log('üíâ Executing SQL with values:', values);
    
    const result = await sequelize.query(query, {
      bind: values,
      type: sequelize.QueryTypes.INSERT,
      returning: true,
      raw: true
    });
    
    console.log('üíâ Transaction created with direct SQL');
    
    res.status(201).json({
      success: true,
      data: result[0][0]
    });
  } catch (error) {
    console.error('üíâ Error in direct transaction creation:', error);
    
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL',
      details: error.message
    });
  }
}; 